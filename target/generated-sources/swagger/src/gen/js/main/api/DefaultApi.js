/**
 * ap-terms-microservice
 * Services that provide access and interaction with terms. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Body', 'model/Body1', 'model/ErrorModel', 'model/InlineResponse200', 'model/InlineResponse2001', 'model/InlineResponse2002', 'model/NullResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Body'), require('../model/Body1'), require('../model/ErrorModel'), require('../model/InlineResponse200'), require('../model/InlineResponse2001'), require('../model/InlineResponse2002'), require('../model/NullResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.ApTermsMicroservice) {
      root.ApTermsMicroservice = {};
    }
    root.ApTermsMicroservice.DefaultApi = factory(root.ApTermsMicroservice.ApiClient, root.ApTermsMicroservice.Body, root.ApTermsMicroservice.Body1, root.ApTermsMicroservice.ErrorModel, root.ApTermsMicroservice.InlineResponse200, root.ApTermsMicroservice.InlineResponse2001, root.ApTermsMicroservice.InlineResponse2002, root.ApTermsMicroservice.NullResponse);
  }
}(this, function(ApiClient, Body, Body1, ErrorModel, InlineResponse200, InlineResponse2001, InlineResponse2002, NullResponse) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version 1.0.0
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the agreeTermsOfUse operation.
     * @callback module:api/DefaultApi~agreeTermsOfUseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NullResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Agree terms of use
     * @param {Number} termsOfUseId the terms of use id
     * @param {module:api/DefaultApi~agreeTermsOfUseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NullResponse}
     */
    this.agreeTermsOfUse = function(termsOfUseId, callback) {
      var postBody = null;

      // verify the required parameter 'termsOfUseId' is set
      if (termsOfUseId == undefined || termsOfUseId == null) {
        throw new Error("Missing the required parameter 'termsOfUseId' when calling agreeTermsOfUse");
      }


      var pathParams = {
        'termsOfUseId': termsOfUseId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = NullResponse;

      return this.apiClient.callApi(
        '/terms/{termsOfUseId}/agree', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the docusignCallback operation.
     * @callback module:api/DefaultApi~docusignCallbackCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * docusign callback
     * @param {module:model/Body1} body The docusign call back param
     * @param {module:api/DefaultApi~docusignCallbackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.docusignCallback = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling docusignCallback");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/terms/docusignCallback', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDocusignViewURL operation.
     * @callback module:api/DefaultApi~getDocusignViewURLCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get docusign view url
     * @param {module:model/Body} body The docusign param
     * @param {module:api/DefaultApi~getDocusignViewURLCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2001}
     */
    this.getDocusignViewURL = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling getDocusignViewURL");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/terms/docusign/viewURL', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTermsOfUse operation.
     * @callback module:api/DefaultApi~getTermsOfUseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get terms of use
     * @param {Number} termsOfUseId the terms of use id
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.noAuth a bool indicates no authentication required, default to false
     * @param {module:api/DefaultApi~getTermsOfUseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.getTermsOfUse = function(termsOfUseId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'termsOfUseId' is set
      if (termsOfUseId == undefined || termsOfUseId == null) {
        throw new Error("Missing the required parameter 'termsOfUseId' when calling getTermsOfUse");
      }


      var pathParams = {
        'termsOfUseId': termsOfUseId
      };
      var queryParams = {
        'noAuth': opts['noAuth']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/terms/detail/{termsOfUseId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
